name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-tag:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do Código
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar Git
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Obter a Última Tag
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Última tag: $latest_tag"

      # 4. Incrementar a Versão
      - name: Calculate New Tag
        id: calculate_new_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Última tag encontrada: $latest_tag"
          IFS='.' read -r major minor patch <<<"${latest_tag#v}"
          while true; do
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
            if git rev-parse --quiet --verify "refs/tags/$new_tag" >/dev/null; then
              echo "Tag $new_tag já existe. Tentando próxima..."
            else
              echo "Nova tag calculada: $new_tag"
              echo "new_tag=$new_tag" >> $GITHUB_ENV
              break
            fi
          done

      # 5. Criar e Publicar a Nova Tag
      - name: Create and Push New Tag
        run: |
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      # 6. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 7. Executar Linting no Código Backend
      - name: Run Backend Linting
        run: |
          pip install flake8
          flake8 app --max-line-length=88 --exclude=__init__.py
      
      # 8.1 Rodar o Linter
      - name: Run Linter with Black
        run: |
          pip install black
          black . --check    

      # 8.2 Executar Linting no Código Frontend
      - name: Run Frontend Linting
        run: |
          npm install eslint
          npx eslint "app/static/*.js" --fix

      # 9. Build da Imagem Docker com a Nova Tag
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg APP_VERSION=${{ env.new_tag }} \
            -t irvids/irvi-passenger-python:${{ env.new_tag }} \
            .
          docker tag irvids/irvi-passenger-python:${{ env.new_tag }} irvids/irvi-passenger-python:latest

      # 10. Testar o Backend e o Frontend
      - name: Run Backend Tests
        run: |
          docker run --rm -e PYTHONPATH=/opt/app irvids/irvi-passenger-python:${{ env.new_tag }} pytest app/tests/
      - name: Run Frontend Tests
        run: |
          npm install
          npm run test

      # 11. Verificar Docker Compose
      - name: Verify Docker Compose Services
        run: |
          docker compose up -d
          curl http://localhost:9090/-/ready || exit 1,
          curl -f http://localhost:3000 || exit 1

      # 12. Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 13. Push da Imagem para o Docker Hub com a Nova Tag e Latest
      - name: Push Docker Image
        run: |
          docker push irvids/irvi-passenger-python:${{ env.new_tag }}
          docker push irvids/irvi-passenger-python:latest
